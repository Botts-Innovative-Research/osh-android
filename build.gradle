ext.oshCoreVersion = '1.4.0'
ext.compileSdkVersion = 31
ext.minSdkVersion = 28
ext.targetSdkVersion = 28
ext.buildToolsVersion = "30.0.2"
version = oshCoreVersion

buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:7.0.1'
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.3.0"
  }
}

allprojects {
  // set build number to HEAD SHA-1
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine('git','rev-parse','--short','HEAD')
    standardOutput = stdout
    // hide errors and don't throw exception if not a git repo
    errorOutput = new ByteArrayOutputStream()
    ignoreExitValue = true
  }
  ext.buildNumber = "$stdout".trim()
}

subprojects {
  group = 'org.sensorhub'

  repositories {
    mavenCentral()
    google()
  }

  if (!project.projectDir.parent.endsWith('osh-android')) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    ext.details = null
    ext.pom = {}

    configurations {
      embeddedApi
      embeddedImpl
      embedded
      embedded.extendsFrom(embeddedApi, embeddedImpl)
      api.extendsFrom(embeddedApi)
      implementation.extendsFrom(embeddedImpl)
      compile {
        extendsFrom embedded
      }
    }

    // OSGi manifest generation task
    task osgiManifest {
      // need to do this after subproject is processed and dependencies are resolved!
      doLast {
        project.osgi {
          manifest {
            from jar.manifest

            // default osgi settings if not overridden by project
            if (!attributes['Bundle-Activator'])
              attributes('Bundle-Activator': 'org.sensorhub.impl.Activator')
            if (!attributes['Import-Package'])
              attributes 'Import-Package': '!java.*,!com.sun.*,!sun.*,!javax.xml.*,!org.xml.sax.*,!org.w3c.dom.*,*'
            //attributes '-noimportjava': true
            //attributes '-sources': true

            // add embedded jars to OSGi classpath
            // only add jars that were not substituted with newer version by gradle
            def classpath = '.'
            def embeddedJars = ''
            def runtimeDeps = project.configurations.runtimeClasspath.collect { it.name };
            project.configurations.embedded.each {
              if (runtimeDeps.contains(it.name)) {
                embeddedJars += 'lib/' + it.name + '=' + it.name + ';lib:=true,'
              }
            }
            attributes '-includeresource': embeddedJars

            // auto-generate Bundle-NativeCode header if native libs are placed in
            // the lib/native resource folder with the proper directory structure
            def resourcesFolder = new File(projectDir, '/src/main/resources')
            def nativeFolder = new File(resourcesFolder, '/lib/native')
            if (nativeFolder.exists()) {
              def currentPlatform = ''
              def nativePaths = ''
              fileTree(dir: nativeFolder).files.each {
                def path = resourcesFolder.toPath().relativize(it.toPath())
                if (path.nameCount != 5) {
                  throw new GradleException("Invalid native library path in resource folder: " + path +
                          ". Path must be of the form 'lib/native/{osname}/{arch}/{libname}.{ext}'")
                }

                // lib paths must be grouped by platform (os and processor)
                def osname = path.getName(2)
                def proc = path.getName(3)
                def platform = 'osname=' + osname + '; processor=' + proc
                if (platform != currentPlatform) {
                  if (!nativePaths.isEmpty())
                    nativePaths += ', '
                  nativePaths += platform
                  currentPlatform = platform;
                }

                nativePaths += '; ' + path.toString().replace('\\', '/')
              }

              attributes 'Bundle-NativeCode': nativePaths
            }
          }
        }
      }
    }

    // OSGi bundle jar task
    task osgi(type: aQute.bnd.gradle.Bundle) {
      archiveClassifier = 'bundle'
      from project.sourceSets.main.output
    }

    osgi.dependsOn osgiManifest
    assemble.dependsOn osgi

    // do stuff at the end in case subprojects add extra info
    afterEvaluate { project ->
      // jar manifest entries
      project.jar {
        manifest {
          // main info
          attributes 'Bundle-SymbolicName': project.group + '.' + project.name
          if (project.description != null && !attributes['Bundle-Name'])
            attributes 'Bundle-Name': project.description
          if (project.details != null)
            attributes 'Bundle-Description': project.details
          attributes 'Bundle-Version': project.version
          if (project.buildNumber != null && !project.buildNumber.isEmpty())
            attributes 'Bundle-BuildNumber': project.buildNumber
          if (!attributes['Bundle-License'])
            attributes 'Bundle-License': 'MPL 2.0 (http://mozilla.org/MPL/2.0)'
          if (!attributes['Bundle-Copyright'] && attributes['Bundle-Vendor'])
            attributes 'Bundle-Copyright': 'Copyright (c) ' + attributes['Bundle-Vendor'] + '. All Rights Reserved'
        }
      }

      // maven artifact content
      project.publishing {
          publications {
              mavenJava(MavenPublication) {
                  from components.java
                  pom.withXml {
                      asNode().get('version') + ({
                          resolveStrategy = Closure.DELEGATE_FIRST
                          name project.description
                          if (project.details != null)
                              description project.details
                          url 'http://www.opensensorhub.org'
                          licenses {
                              license {
                                  name 'Mozilla Public License Version 2.0'
                                  url 'http://www.mozilla.org/MPL/2.0'
                                  distribution 'repo'
                              }
                          }
                          def repoName = projectDir.parentFile.name
                          scm {
                              url 'https://github.com/opensensorhub/' + repoName + '/tree/master/' + project.name
                              connection 'scm:git:git://github.com/opensensorhub/' + repoName + '.git'
                          }
                          issueManagement {
                              url 'https://github.com/opensensorhub/' + repoName + '/issues'
                              system 'GitHub Issues'
                          }
                      } >> project.pom)
                  }
              }
          }
      }
    }

    // disable jar task if no source is included
    if (!new File(project.projectDir, 'src').exists()) {
      tasks.osgi.enabled = false
      tasks.jar.enabled = false
    }

    // custom task to install in local maven repo
    task install
    install.dependsOn(build)
    install.dependsOn(publishToMavenLocal)

  }

  configurations.all {
    exclude group: 'org.sensorhub', module: 'sensorhub-comm-ble-dbus'
    resolutionStrategy.dependencySubstitution {
      // force use of local projects
      substitute module('org.sensorhub:sensorhub-core') with project(':sensorhub-core')
      substitute module('org.sensorhub:sensorhub-comm-ble') with project(':sensorhub-comm-ble')
      substitute module('org.sensorhub:sensorhub-service-swe') with project(':sensorhub-service-swe')
      substitute module('org.sensorhub:sensorhub-service-video') with project(':sensorhub-service-video')
      substitute module('org.vast.opengis:ogc-services-sps') with project(':ogc-services-sps')

      // override objenesis version to get new android instantiators
      substitute module('uk.com.robust-it:cloning:1.9.1') with module('uk.com.robust-it:cloning:1.9.10')
      substitute module('org.slf4j:slf4j-android:1.6.1-RC1') with module('org.slf4j:slf4j-api:1.7.25')
    }
  }

  version = oshCoreVersion
}

