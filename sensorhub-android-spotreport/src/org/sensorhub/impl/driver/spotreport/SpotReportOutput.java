/**************************** BEGIN LICENSE BLOCK ***************************

 The contents of this file are subject to the Mozilla Public License, v. 2.0.
 If a copy of the MPL was not distributed with this file, You can obtain one
 at http://mozilla.org/MPL/2.0/.

 Software distributed under the License is distributed on an "AS IS" basis,
 WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 for the specific language governing rights and limitations under the License.

 Copyright (C) 2019 Botts Innovative Research, Inc. All Rights Reserved.
 ******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.impl.driver.spotreport;

import java.util.List;

import net.opengis.swe.v20.DataBlock;
import net.opengis.swe.v20.DataComponent;
import net.opengis.swe.v20.DataEncoding;
import net.opengis.swe.v20.Text;
import net.opengis.swe.v20.Time;
import net.opengis.swe.v20.Vector;

import org.sensorhub.api.sensor.SensorDataEvent;
import org.sensorhub.api.sensor.SensorException;
import org.sensorhub.impl.sensor.AbstractSensorOutput;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.vast.data.AbstractDataBlock;
import org.vast.data.DataBlockMixed;
import org.vast.swe.SWEHelper;
import org.vast.swe.helper.GeoPosHelper;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationManager;
import android.os.ResultReceiver;
import android.util.Log;

/**
 * <p>
 * Implementation of data interface for Spot Reports
 * </p>
 *
 * @author Nicolas Garay <nicolasgaray@icloud.com>
 * @since Nov 9, 2019
 */
public class SpotReportOutput extends AbstractSensorOutput<SpotReportDriver> {

    // keep logger name short because in LogCat it's max 23 chars
    private static final Logger log = LoggerFactory.getLogger(SpotReportOutput.class.getSimpleName());

    // Data Associated with Broadcast Receivers and Intents
    private static final String ACTION_SUBMIT_IMAGE_REPORT = "org.sensorhub.android.intent.SPOT_REPORT_IMAGE";
    private static final int SUBMIT_REPORT_FAILURE = 0;
    private static final int SUBMIT_REPORT_SUCCESS = 1;
    private static final String DATA_LOC = "location";
    private static final String DATA_REPORT_NAME = "name";
    private static final String DATA_REPORT_DESCRIPTION = "description";
    private static final String DATA_REPORT_CATEGORY = "item";
    private SpotReportReceiver broadcastReceiver = new SpotReportReceiver();

    // SWE DataBlock elements
    private static final String DATA_RECORD_REPORT_TIME_LABEL = "time";
    private static final String DATA_RECORD_REPORT_LOC_LABEL = "location";
    private static final String DATA_RECORD_REPORT_NAME_LABEL = "name";
    private static final String DATA_RECORD_REPORT_DESCRIPTION_LABEL = "description";
    private static final String DATA_RECORD_REPORTING_CATEGORY_LABEL = "category";

    private static final String DATA_RECORD_NAME = "Spot Report";
    private static final String DATA_RECORD_DESCRIPTION =
            "A report generated by visual observance and classification which is accompanied by a" +
                    " location, description, and other data";
    private static final String DATA_RECORD_DEFINITION =
            SWEHelper.getPropertyUri("SpotReport");

    private DataComponent dataStruct;
    private DataEncoding dataEncoding;

    private Context context;
    private String name;

    SpotReportOutput(SpotReportDriver parentModule) {

        super(parentModule);
        this.name = parentModule.getName() + " Image";
        context = getParentModule().getConfiguration().androidContext;
    }

    @Override
    public String getName() {

        return name;
    }

    /**
     * Initialize the output data structure
     *
     * @throws SensorException
     */
    void init() throws SensorException {

        // Build data structure ********************************************************************
        SWEHelper sweHelper = new SWEHelper();
        dataStruct = sweHelper.newDataRecord();
        dataStruct.setDescription(DATA_RECORD_DESCRIPTION);
        dataStruct.setDefinition(DATA_RECORD_DEFINITION);
        dataStruct.setName(DATA_RECORD_NAME);

        // Add time stamp component to data record
        Time time = sweHelper.newTimeStampIsoUTC();
        dataStruct.addComponent(DATA_RECORD_REPORT_TIME_LABEL, time);

        // Add the report name component of the data record
        Text name = sweHelper.newText(SWEHelper.getPropertyUri("ReportName"),
                "Report Name",
                "An identifier used as a describer for the report");
        dataStruct.addComponent(DATA_RECORD_REPORT_NAME_LABEL, name);

        // Add the report description component of the data record
        Text description = sweHelper.newText(SWEHelper.getPropertyUri("ReportDescription"),
                "Report Description",
                "A verbose description of the observed event");
        dataStruct.addComponent(DATA_RECORD_REPORT_DESCRIPTION_LABEL, description);

        // Add the reporting item component of the data record
        Text category = sweHelper.newText(SWEHelper.getPropertyUri("ReportCategory"),
                "Report Category",
                "A categorical value used to identify a report as belonging to a kind, " +
                        "family, or group of reports");
        dataStruct.addComponent(DATA_RECORD_REPORTING_CATEGORY_LABEL, category);

        // Add the location component of the data record
        GeoPosHelper geoPosHelper = new GeoPosHelper();
        Vector locationVectorLLA = geoPosHelper.newLocationVectorLLA(null);
        locationVectorLLA.setLocalFrame(parentSensor.localFrameURI);
        dataStruct.addComponent(DATA_RECORD_REPORT_LOC_LABEL, locationVectorLLA);

        // Setup data encoding *********************************************************************
        this.dataEncoding = sweHelper.newTextEncoding(",", "\n");
    }

    /**
     * Populate and submit an instance of the SpotReport containing no image.
     *
     * @param category       The category for the spot report
     * @param locationSource The location source name for the spot report
     * @param name           The name of the report
     * @param description    A description of the report
     */
    private void submitReport(String category, String locationSource, String name, String description) {

        Location location;

        location = getLocation(locationSource);

        double samplingTime = location.getTime() / 1000.0;

        // generate new data record
        DataBlock newRecord;

        if (latestRecord == null) {

            newRecord = dataStruct.createDataBlock();
        } else {

            newRecord = latestRecord.renew();
        }

        newRecord.setDoubleValue(0, samplingTime);
        newRecord.setStringValue(1, name);
        newRecord.setStringValue(2, description);
        newRecord.setStringValue(3, category);

        AbstractDataBlock locationData = ((DataBlockMixed) newRecord).getUnderlyingObject()[4];
        locationData.setDoubleValue(0, location.getLatitude());
        locationData.setDoubleValue(1, location.getLongitude());
        locationData.setDoubleValue(2, location.getAltitude());

        // update latest record and send event
        latestRecord = newRecord;
        latestRecordTime = System.currentTimeMillis();
        eventHandler.publishEvent(new SensorDataEvent(latestRecordTime, this, newRecord));
    }

    public void start() {

        context.registerReceiver(broadcastReceiver, new IntentFilter(ACTION_SUBMIT_IMAGE_REPORT));
    }

    @Override
    public void stop() {

        context.unregisterReceiver(broadcastReceiver);
    }

    @Override
    public double getAverageSamplingPeriod() {

        return 1;
    }

    @Override
    public DataComponent getRecordDescription() {

        return dataStruct;
    }

    @Override
    public DataEncoding getRecommendedEncoding() {

        return dataEncoding;
    }

    @Override
    public DataBlock getLatestRecord() {

        return latestRecord;
    }

    @Override
    public long getLatestRecordTime() {

        return latestRecordTime;
    }

    /**
     * Get the location provider based on the given name of the location source
     *
     * @param locationSource The name of the source for location data
     * @return Instance of the location provider
     */
    private Location getLocation(String locationSource) {

        Location location = null;

        // Attempt to get location based given location source
        if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LOCATION)) {

            // Retrieve the location manager
            LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);

            // Get a list of all location providers
            List<String> locProviders = locationManager.getAllProviders();

            // Scan through the list until a provider is matched
            for (String providerName : locProviders) {

                if (providerName.equalsIgnoreCase(locationSource)) {

                    log.debug("Detected location provider " + providerName);

                    if (context.checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED ||
                            context.checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {

                        location = locationManager.getLastKnownLocation(providerName);

                        log.debug("Location " + location.toString());
                    }
                }
            }
        }

        return location;
    }

    /**
     * Broadcast receiver to register with OS for IPC with SpotReportActivity
     */
    private class SpotReportReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {

            ResultReceiver resultReceiver = intent.getParcelableExtra(Intent.EXTRA_RESULT_RECEIVER);

            try {

                if (ACTION_SUBMIT_IMAGE_REPORT.equals(intent.getAction())) {

                    String category = intent.getStringExtra(DATA_REPORT_CATEGORY);
                    String locationSource = intent.getStringExtra(DATA_LOC);
                    String name = intent.getStringExtra(DATA_REPORT_NAME);
                    String description = intent.getStringExtra(DATA_REPORT_DESCRIPTION);

                    submitReport(category, locationSource, name, description);

                    resultReceiver.send(SUBMIT_REPORT_SUCCESS, null);

                }

            } catch (Exception e) {

                Log.e("SpotReportOutput", e.toString());
                resultReceiver.send(SUBMIT_REPORT_FAILURE, null);
            }
        }
    }
}
